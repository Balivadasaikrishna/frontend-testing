name: Frontend Testing CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC to ensure reliability
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  PLAYWRIGHT_VERSION: '1.54.2'

jobs:
  # Unit Tests Job
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run unit tests
      run: npm run test:unit
      
    - name: Generate test coverage report
      run: npm run test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unit-tests
        name: unit-test-coverage

  # E2E Tests Job
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps ${{ matrix.browser }}
      
    - name: Run E2E tests
      run: npx playwright test --project=${{ matrix.browser }}
      env:
        PLAYWRIGHT_BROWSERS_PATH: 0
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-${{ matrix.browser }}
        path: playwright-report/
        retention-days: 30
        
    - name: Upload test videos
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-videos-${{ matrix.browser }}
        path: test-results/
        retention-days: 30

  # Performance Testing Job
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run Lighthouse CI
      run: |
        npm install -g @lhci/cli
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Security Scanning Job (Optional)
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: ${{ secrets.SNYK_TOKEN != '' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # Quality Gates Job
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, performance-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run code quality checks
      run: |
        npm run lint
        npm run type-check
        npm run test:coverage
        
    - name: Quality Gate - Coverage Threshold
      run: |
        COVERAGE=$(npm run test:coverage --silent | grep -o '[0-9]*\.[0-9]*%' | head -1 | sed 's/%//')
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "❌ Test coverage ($COVERAGE%) is below 80% threshold"
          exit 1
        else
          echo "✅ Test coverage ($COVERAGE%) meets 80% threshold"
        fi
        
    - name: Quality Gate - Test Results
      run: |
        if [ -f "test-results/failed-tests.txt" ]; then
          echo "❌ Some tests failed"
          exit 1
        else
          echo "✅ All tests passed"
        fi

  # Deployment Job (Conditional)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-gates]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        # Add your deployment commands here
        # Example: npm run deploy:staging
        
    - name: Run smoke tests
      run: |
        echo "🧪 Running smoke tests on staging..."
        # Add your smoke test commands here
        # Example: npm run test:smoke:staging

  # Notification Job (Optional)
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [quality-gates, deploy-staging]
    if: always() && ${{ secrets.SLACK_WEBHOOK_URL != '' }}
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#testing-notifications'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Metrics and Reporting Job
  metrics:
    name: Generate Metrics Report
    runs-on: ubuntu-latest
    needs: [quality-gates]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Generate test metrics
      run: |
        echo "📊 Generating test metrics report..."
        npm run test:metrics
        
    - name: Upload metrics report
      uses: actions/upload-artifact@v4
      with:
        name: test-metrics-report
        path: metrics-report/
        retention-days: 90
